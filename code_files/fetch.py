import os , json , subprocess,pathlib

def get_files(path):
    return [file for file in os.listdir(path) if file != ".gitkeep"]

def get_subtitle_streams(input_file): #Generated by AI
    cmd = [
        "ffprobe", "-v", "error",
        "-select_streams", "s",
        "-show_entries", "stream=index,codec_name:stream_tags=language:stream_tags=title",
        "-of", "json",
        input_file
    ]
    # Force UTF-8 decoding and catch stderr for debugging
    result = subprocess.run(cmd, capture_output=True, encoding="utf-8", errors="replace")
    if result.returncode != 0:
        raise RuntimeError(f"ffprobe failed:\n{result.stderr}")

    try:
        data = json.loads(result.stdout)
    except json.JSONDecodeError as e:
        raise RuntimeError(f"Invalid ffprobe output: {e}\nOutput:\n{result.stdout}")

    streams = []
    for s in data.get("streams", []):
        codec = s.get("codec_name", "")
        tags = s.get("tags", {}) or {}
        lang = tags.get("language") or tags.get("title") or f"unknown{s['index']}"
        if codec in ("subrip", "ass", "webvtt"):
            streams.append((s["index"], lang, codec))
    return streams


def extract_subtitles(input_file): #Generated by AI
    subtitle_paths = []
    base_name = os.path.splitext(input_file)[0]
    output_folder = os.path.join("./code_files/subtitles", base_name)

    subtitle_streams = get_subtitle_streams(input_file)
    if not subtitle_streams:
        print(f"No text-based subtitles found in {input_file}. Skipping.")
        return subtitle_paths

    os.makedirs(output_folder, exist_ok=True)

    for index, lang, codec in subtitle_streams:
        output_subs = os.path.join(output_folder, f"{lang}.vtt")
        output_subs = os.path.normpath(output_subs).replace("\\", "/")
        
        if os.path.exists(output_subs):
            print(f"{output_subs} already exits, Skipping.")
            subtitle_paths.append("/".join(output_subs.split("/")[1:]))
            continue

        print(f"Extracting stream {index} ({codec}) as {output_subs}")
        cmd = ["ffmpeg", "-y", "-i", input_file, "-map", f"0:{index}", output_subs]
        result = subprocess.run(cmd, capture_output=True)
        if result.returncode != 0:
            raise RuntimeError(f"ffmpeg failed:\n{result.stderr.decode(errors='ignore')}")
        subtitle_paths.append("/".join(output_subs.split("/")[1:]))

    return subtitle_paths

# def compare_subtitle(oldsubtitlepath, newfilepath): #Generated by AI
#     cmd = [
#         "ffmpeg",
#         "-i", newfilepath,
#         "-map", "0:s:0",
#         "-t", "100",
#         "-f", "webvtt",
#         "-",
#     ]
#     result = subprocess.run(
#         cmd,
#         stdout=subprocess.PIPE,
#         stderr=subprocess.DEVNULL,
#         text=True,
#         encoding="utf-8",
#         errors="ignore"
#     )
#     new_lines = result.stdout.splitlines()[5:10]

#     old_file = pathlib.Path(oldsubtitlepath)
#     if not old_file.exists():
#         return False

#     old_lines = old_file.read_text(errors="ignore").splitlines()[:20]
#     return all(line in old_lines for line in new_lines)

def remove_duplicates(arr):
    arr = set(arr)
    arr = list(arr)
    return arr

movies_Folder = get_files('Movies')
series_folder = get_files('Series')
posters = get_files('Posters')
posters = [f"../Posters/{x}" for x in posters]
os.makedirs("./code_files/subtitles", exist_ok=True)

movies = []
series = {}
subtitle_paths = []
dataBase = {}
for i in movies_Folder:
    if "." in i:
        movies.append(f"../Movies/{i}")
        input_file = f"./Movies/{i}"

        subtitle_list = extract_subtitles(input_file)
        subtitle_paths.extend(subtitle_list)


for series_name in series_folder:
    series_files = list(os.listdir(os.path.join('Series',series_name)))
    path_adjusted_series_files = []
    for x in series_files:
        path_adjusted_series_files.append(f"../Series/{series_name}/{x}")
        input_file = f"./Series/{series_name}/{x}"

        subtitle_list = extract_subtitles(input_file)
        subtitle_paths.extend(subtitle_list)

    series_files = path_adjusted_series_files
    series[series_name]=series_files


dataBase["movies"] = movies
dataBase['series'] = series
dataBase["poster"] = posters
dataBase['subtitles'] = remove_duplicates(subtitle_paths)

with open("./code_files/database.json", "w") as file:
    json.dump(dataBase, file, indent=4)